// OBJETOS

// Voc√™ j√° aprendeu que as vari√°veis em JavaScript s√£o recipientes ou containers para os dados. Por exemplo:

// let car = 'Fiat';

// Agora √© hora de aprender sobre objetos!
// Um objeto em JavaScript √© uma entidade independente, com propriedades e tipos. Uma propriedade √© a associa√ß√£o entre uma chave e um valor, s√£o essas as caracter√≠sticas do objeto.
// Pense em um objeto da vida real, como o carro do exemplo acima. Cada carro tem sua cor, peso, tamanho, quantidade de portas e etc. Essas s√£o suas caracter√≠sticas, suas propriedades. E, da mesma forma que funciona um objeto da vida real, funcionam os objetos em JavaScript.


// Ent√£o, pessoal, como voc√™s viram, objetos s√£o estruturas ou cole√ß√µes compostas por pares chave-valor. Tamb√©m √© poss√≠vel armazenar um objeto dentro de outro, ou at√© mesmo dentro de um array.

// let car = {
//   type: 'Fiat',
//   model: '500',
//   color: 'white',
// };

// Para acessar as chaves dentro de um objeto, pode-se usar nota√ß√£o de ponto ou nota√ß√£o de colchetes.
// Se o objeto est√° dentro de um array, ele √© acessado atrav√©s do seu √≠ndice, da mesma forma que se acessaria uma informa√ß√£o num array de strings, por exemplo. Ap√≥s pegar o objeto que voc√™ deseja, para acessar suas propriedades basta usar a nota√ß√£o de colchetes ou a nota√ß√£o de ponto. O mesmo vale para acessar objetos dentro de objetos.
// As chaves de um objeto s√£o armazenadas como strings e, para conseguir acessar propriedades nomeadas com n√∫meros, como 0, por exemplo, s√≥ √© poss√≠vel usando a nota√ß√£o de colchetes. Se voc√™ usar a nota√ß√£o de ponto, ocorre um erro. Ao usar a nota√ß√£o de colchetes tamb√©m √© poss√≠vel chamar vari√°veis que fazem rela√ß√£o com a chave que voc√™ quer acessar dentro desses colchetes.
// Escreva os c√≥digos abaixo no seu VSCode para acompanhar os resultados.

// let diasDaSemana = {
//   : 'domingo',
//   : 'segunda',
//   : 'ter√ßa',
//   : 'quarta',
//   : 'quinta',
//   : 'sexta',
//   : 's√°bado',
//   };
  
//   diasDaSemana.1; // SyntaxError: Unexpected number
//   console.log(diasDaSemana['1']); // domingo

//   No c√≥digo acima, ocorre um erro por usar nota√ß√£o de ponto ao inv√©s de nota√ß√£o de colchetes com uma propriedade nomeada com n√∫mero.
// Agora veja este exemplo:

// let conta = {
//   agencia: '0000',
//   banco: {
//     cod: '012',
//     id: 4,
//     nome: 'TrybeBank',
//   },
// };

// let infoDoBanco = 'banco';
// console.log(conta[infoDoBanco]); // { cod: '012', id: 4, nome: 'TrybeBank' }
// console.log(conta[infoDoBanco]['nome']); // TrybeBank

// console.log(conta.agencia); // 0000
// console.log(conta['agencia']); // 0000

// console.log(conta.banco.cod); // 012
// console.log(conta['banco']['id']); // 4

// Neste exemplo, a chave banco do objeto conta, guarda um outro objeto, e tamb√©m h√° o uso de vari√°vel na nota√ß√£o de colchetes, al√©m de voc√™ poder ver exemplos usando nota√ß√£o de ponto e nota√ß√£o de colchetes.
// Neste outro exemplo, veja como vamos adicionar as informa√ß√µes de forma encadeada:

// let usuario = {
//   id: 99,
//   email: 'jakeperalta@gmail.com',
//   infoPessoal: {
//     nome: 'Jake',
//     sobrenome: 'Peralta',
//     endereco: {
//       rua: 'Smith Street',
//       bairro: 'Brooklyn',
//       cidade: 'Nova Iorque',
//       estado: 'Nova Iorque',
//     },
//   },
// };

// console.log(usuario['id']); // 99
// console.log(usuario.email); // jakeperalta@gmail.com

// console.log(usuario.infoPessoal.endereco.rua); // Smith Street
// console.log(usuario['infoPessoal']['endereco']['cidade']); // Nova Iorque

// O objeto deste exemplo possui a chave infoPessoal que possui outras 3 chaves, uma delas sendo endereco, que √© outro objeto! Ou seja, o objeto usuario possui outros dois dentro dele.
// Agora, e se o nosso objeto est√° dentro de um array? Como acessamos as propriedades do objeto? Veja este exemplo:

// let moradores = [
//   {
//     nome: 'Luiza',
//     sobrenome: 'Guimar√£es',
//     andar: 10,
//     apartamento: 1005,
//   },
//   {
//     nome: 'William',
//     sobrenome: 'Albuquerque',
//     andar: 5,
//     apartamento: 502,
//   },
//   {
//     nome: 'Murilo',
//     sobrenome: 'Ferraz',
//     andar: 8,
//     apartamento: 804,
//   },
//   {
//     nome: 'Zoey',
//     sobrenome: 'Brooks',
//     andar: 1,
//     apartamento: 101,
//   },
// ];

// let primeiroMorador = moradores[0];
// console.log(primeiroMorador); // { nome: 'Luiza', sobrenome: 'Guimar√£es', andar: 10, apartamento: 1005 }
// console.log(primeiroMorador['andar']); // 10

// let ultimoMorador = moradores[moradores.length - 1];
// console.log(ultimoMorador); // { nome: 'Zoey', sobrenome: 'Brooks', andar: 1, apartamento: 101 }
// console.log(ultimoMorador.nome); // Zoey

// Esse √∫ltimo bloco de c√≥digo √© um exemplo de um array composto por objetos. Os objetos desejados foram acessados atrav√©s dos seus √≠ndices e armazenados dentro de vari√°veis para facilitar a compreens√£o.
// Perceba que o nome que escolhemos para a fun√ß√£o √© um nome composto, e para a escrita de nomes compostos em JavaScript existem algumas conven√ß√µes. Uma delas √© a kebab case, onde o nome fica separado por um tra√ßo. Apesar de ser uma conven√ß√£o, n√£o √© uma boa pr√°tica de escrita, pois muitas linguagens interpretam o tra√ßo como um sinal de subtra√ß√£o, o que pode ocasionar bugs.
// Voc√™ se lembra das regras de nomea√ß√£o de vari√°veis? As mesmas se aplicam aqui. O recomendado √© usar nomes descrit√≠veis para as propriedades, al√©m de escrev√™-las no estilo camelCase.
// ATEN√á√ÉO: N√£o use o estilo de escrita kebab-case no JavaScript, isso n√£o √© uma boa pr√°tica porque o tra√ßo pode ser interpretado como um sinal de subtra√ß√£o. Use o estilo camelCase.
// Exemplos de escrita camelCase:
// nomeCompleto;
// cidadeNatal;
// tituloOriginal.
// Exemplos de escrita kebab-case:
// nome-completo;
// cidade-natal;
// titulo-original.

// Para fixar
// Agora vamos fazer alguns exerc√≠cios de fixa√ß√£o para consolidar os conhecimentos adquiridos no video anterior! üòâ

// 1 - Crie um objeto player contendo as vari√°veis listadas abaixo.

// let name = 'Marta';
// let lastName = 'Silva';
// let age = 34;
// let medals = { golden: 2, silver: 3 };

// 2 - Acesse as chaves name, lastName e age e concatene as suas informa√ß√µes para imprimir no console uma mensagem no seguinte formato: "A jogadora Marta Silva tem 34 anos de idade".

// 3 - Adicione ao objeto a chave bestInTheWorld e atribua a esta chave um array contendo as datas em que a jogadora Marta foi considerada a melhor do mundo.

// [2006, 2007, 2008, 2009, 2010, 2018]

// 4 - Acesse a chave bestInTheWorld e fa√ßa um console.log no seguinte formato: "A jogadora Marta Silva foi eleita a melhor do mundo por 6 vezes".

// 5 - Acesse a chave medals e fa√ßa um console.log no seguinte formato: "A jogadora possui 2 medalhas de ouro e 3 medalhas de prata".
// Agora veremos uma varia√ß√£o do la√ßo for, que nos garante facilidade ao lidar com objetos.


// FOR/IN FOR/OF

// Depois de conhecer o la√ßo for/in, o c√≥digo que mostra as marcas de carros presentes em um Array √©:

// let cars = ['Saab', 'Volvo', 'BMW'];

// for (let index in cars) {
//   console.log(cars[index]);
// }

// Um outro exemplo √© a itera√ß√£o nas chaves de um objeto:

// let car = {
//   type: 'Fiat',
//   model: '500',
//   color: 'white',
// };

// for (let index in car) {
//   console.log(index, car[index]);
// }

// O resultado do c√≥digo acima √©:

// type Fiat
// model 500
// color white

// for/of
// O for/of tem uma aplica√ß√£o bastante parecida com o que vimos agora no for/in, mas com uma diferen√ßa crucial.
// Como dito no v√≠deo, o for/in percorre as propriedades dos objetos que forem enumer√°veis com base na ordem de inser√ß√£o, e n√£o nos valores das propriedades, ou seja, nos retorna o √≠ndice. Por exemplo, se tivermos um array com tr√™s strings dentro:

// let food = ['hamburguer', 'bife', 'acaraj√©'];

// As propriedades dos elementos do array ser√£o os √≠ndices de cada posi√ß√£o, come√ßando por zero. √â por isso que os n√∫meros retornados pelo console.log s√£o 0, 1 e 2: as propriedades que correspondem ao √≠ndice de cada posi√ß√£o do array.



// for (let position in food) {
//   console.log(position);
// };
// //resultado: 0, 1, 2;

// Se percorrermos um objeto, tamb√©m teremos o mesmo resultado. O for/in ir√° percorrer a propriedade declarada, e n√£o o seu valor em si.
// J√° o for/of percorre os elementos dos objetos iter√°veis atrav√©s dos seus respectivos valores, e n√£o dos √≠ndices como o for/in. Vejamos o exemplo:

// let food = ['hamburguer', 'bife', 'acaraj√©'];
// for (let value of food) {
//   console.log(value);
// };
// //resultado: hamburguer, bife, acaraj√©;


// Para fixar
// No exemplo acima, utilizamos o for/of para percorrer o nosso iter√°vel e nos retornar o valor dos √≠ndices.
// Agora que voc√™ j√° sabe a diferen√ßa entre eles e como us√°-los, vamos praticar?
// 1 - Usando o objeto abaixo, utilize for/in e imprima no console a mensagem 'Ol√° xxxxx' para cada nome, substituindo o xxxxx pelo nome em quest√£o.
// Copiar
// let names = {
//   person1: 'Jo√£o',
//   person2: 'Maria',
//   person3: 'Jorge',
// };
// 2 - Usando o objeto abaixo, utilize for/in e imprima um console.log com as chaves e valores desse objeto.
// Copiar
// let car = {
//   model: 'A3 Sedan',
//   manufacturer: 'Audi',
//   year: 2020
// };


// FUN√á√ïES

// Sem fun√ß√£o
// let nome = 'Jo√£o';

// console.log('Bom dia, ' + nome);


// // Com fun√ß√£o
// function bomDiaTryber(nome) {
//   console.log('Bom dia, ' + nome);
// }

// bomDiaTryber('Jo√£o'); // Bom dia, Jo√£o
// bomDiaTryber('Julia'); // Bom dia, Julia
// bomDiaTryber('Marcelo'); // Bom dia, Marcelo


// function bomDia() {
//   return 'Bom dia!';
// }

// console.log(bomDia()); // Bom dia!


// let status = 'deslogado';

// function logarDeslogar() {
//   if (status === 'deslogado') {
//     status = 'logado';
//   } else {
//     status = 'deslogado';
//   }
// }

// console.log(status); // deslogado

// logarDeslogar();
// console.log(status); // logado

// logarDeslogar();
// console.log(status); // deslogado

// console.log('O usu√°rio est√° ' + status); // O usu√°rio est√° deslogado



// // Com fun√ß√£o
// function soma(a, b) {
//   return a + b;
// }

// console.log(soma(5, 2)); // 7


// function maiorNum(primeiroNum, segundoNum) {
//   if (primeiroNum > segundoNum) {
//     return primeiroNum + ' √© maior que ' + segundoNum;
//   } else if (segundoNum > primeiroNum) {
//     return segundoNum + ' √© maior que ' + primeiroNum;
//   } else {
//     return 'Os n√∫meros s√£o iguais';
//   }
// }

// console.log(maiorNum(10, 20)); // 20 √© maior que 10
// console.log(maiorNum(2, -5)); // 2 √© maior que -5
// console.log(maiorNum(1, 1)); // Os n√∫meros s√£o iguais



// ACADEMIA DE L√ìGICA

// Exerc√≠cio 1 - Crie uma fun√ß√£o que calcule a √°rea e o per√≠metro de um quadril√°tero qualquer. Essa fun√ß√£o deve receber dois par√¢metros: base e altura e retornar um objeto no formato:

// { 
//     area: 0, 
//     perimetro: 0 
// }
// F√≥rmulas: perimetro = (2 * base) + (2 * altura) area = base * altura




// Exerc√≠cio 2 - Crie uma fun√ß√£o que, dado um array de n√∫meros inteiros, retorne a quantidade de n√∫meros pares e √≠mpares no formato:
// {
//     pares: 0, 
//     √≠mpares: 0 
// }  


// Exerc√≠cio 3 - Crie uma fun√ß√£o que receba uma string word e outra string ending. Verifique se a string ending √© o final da string word. Considere que a string ending sempre ser√° menor que a string word.

// // valor de teste: 'trybe' e 'be'
// // valor esperado no retorno da fun√ß√£o: true
// verificaFimPalavra('trybe', 'be');  
// // Retorno esperado: true  
// verificaFimPalavra('joaofernando', 'fernan');  
// //  Retorno esperado: false;  

// Dica: Use o split.